#!/usr/bin/perl

# Joshua Leihe - jleihe@ucsc.edu
# Some functions adapted from Assignments/asg1-perl-pmake/code/graph.perl

use strict;
use warnings;
use Getopt::Std;

#Hashes for storing the various conponents of the make file
my (%commands, %deps, %macros);

my $firstTarget;	#the first target encountered in the file
my $commandTarget;	#the target of the command found on the next line
my $systemCall;		#the call to be sent to the system

#Command Line Options
my %options=();
getopts("dnf:",\%options);

my $nonEx = $options{n};

#Functions

# getDeps(): Return dependencies found in the make file in the form of
# a target followed by an array of dependencies
sub getDeps ($) {
	my ($line) = @_;
	#Search for a dependency line in the file
	return undef unless $line =~ m/^(\S+)\s*:\s*(.*?)\s*$/;
	#$1 is the target. $2 is a string representing the list of deps
	my ($target, $dependency) = ($1, $2);
	my @dependencies = split m/\s+/, $dependency;
	return $target, \@dependencies;
}

sub getMacros ($) {
	my ($line) = @_;
	#match lines the define a macro
	return undef unless $line =~ m/(\w*)\s?=(.*)/;
	my ($macro, $content) = ($1, $2);
	return $macro, $content;
}

sub makeSystemCalls;
sub makeSystemCalls {
	my ($head) = @_;
	my $currentDeps = $deps{$head};
	
	foreach my $i (@$currentDeps) {
		makeSystemCalls($i);
	}
	
	$systemCall = $commands{$head};
	print "\nSystem call: $systemCall\n\n" if $nonEx;
	system($systemCall) if !$nonEx;
}

#Using the provided makefile if available otherwise use "Makefile"
my $filename = $options{f};
if (!(defined $filename)) {
	$filename = "Makefile";
}

#Open $filename 
open(my $file, '<', $filename) or die "Could not open '$filename' $!";
  
while (my $line = <$file>) {
	my ($target, $deps) = getDeps $line;

	if (defined $target) {
		#Store first target if it exists on the current line
		$firstTarget = $target if (!(defined $firstTarget));
		#Store current target for using parsing the next line
		$commandTarget = $target;
	}

	#match lines that contain commands
	$line =~ m/^\t{1}(.*\w.*)?/;
	if (defined $1) {
		#add a command to the hash with the last target as it's key
		$commands{$commandTarget} = $1;
	}

	my ($macro, $content) = getMacros $line;

	$deps{$target} = $deps if defined $target;
	$macros{$macro} = $content if defined $macro; 
}

#Make system calls
makeSystemCalls($firstTarget);
