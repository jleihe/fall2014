head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2014.10.10.23.32.49;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.03.08.21.43.17;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.03.07.06.33.59;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.03.07.06.33.10;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.03.07.05.42.15;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@#!/afs/cats.ucsc.edu/courses/cmps112-wm/usr/smalltalk/bin/gst -f
"$Id: writebits.st,v 1.4 2012-03-08 13:43:17-08 - - $"
execname := '$RCSfile: writebits.st,v $' =~ '.*: (.*),v.*' at: 1.

""
" Opens a file given as the first argument and writes out bits."
""

nl := Character nl.

FileStream extend [
   |bitNumber bitBuffer|
   clearByte [
      bitNumber := 8.
      bitBuffer := 0.
   ]
   flushByte [
      bitNumber = 8 ifFalse: [
         self nextPut: bitBuffer asCharacter.
         self clearByte.
      ]
   ]
   writeBit: bit [
      bitBuffer isNil ifTrue: [self clearByte].
      bitNumber = 0 ifTrue: [self flushByte].
      bitBuffer := bitBuffer bitAt: bitNumber put: bit.
      bitNumber := bitNumber - 1.
   ]
]


" Output of bitstream hello world."
bitArray := #(
   0 1 0 0   1 0 0 0
   0 1 1 0   0 1 0 1
   0 1 1 0   1 1 0 0
   0 1 1 0   1 1 0 0
   0 1 1 0   1 1 1 1
   0 0 1 0   1 1 0 0
   0 0 1 0   0 0 0 0
   0 1 0 1   0 1 1 1
   0 1 1 0   1 1 1 1
   0 1 1 1   0 0 1 0
   0 1 1 0   1 1 0 0
   0 1 1 0   0 1 0 0
   0 0 1 0   0 0 0 1
   0 0 0 0   1 0 1 0
).

writeBitArray := [:outfile|
   bitArray do: [:bit| outfile writeBit: bit].
   outfile flushByte.
].

Smalltalk arguments size = 0
   ifTrue: [writeBitArray value: stdout]
   ifFalse: [
      |outfilename|
      outfilename := Smalltalk arguments at: 1.
      [  |outfile|
         outfile := FileStream open: outfilename mode: FileStream write.
         writeBitArray value: outfile.
         outfile close.
      ] on: SystemExceptions.FileError do: [:signal |
         |errno|
         errno := File errno.
         stdout flush.
         stderr << execname << ': ' << filename << ': '
                         << signal messageText << nl.
         stderr flush.
      ]
   ]

"TEST: writebits.st"
"TEST: writebits.st | od -c"
"TEST: writebits.st /tmp/foo2"
"TEST: cat -nv /tmp/foo2"
"TEST: od -c /tmp/foo2"

@


1.4
log
@-
@
text
@d2 1
a2 1
"$Id: writebits.st,v 1.3 2012-03-06 22:33:59-08 - - $"
d19 1
a19 1
         self << bitBuffer asCharacter.
@


1.3
log
@-
@
text
@d2 1
a2 1
"$Id: writebits.st,v 1.2 2012-03-06 22:33:10-08 - - $"
d18 1
a18 1
      bitBuffer = 8 ifFalse: [
@


1.2
log
@-
@
text
@d2 1
a2 1
"$Id: writebits.st,v 1.1 2012-03-06 21:42:15-08 - - $"
d31 1
a31 1

@


1.1
log
@-
@
text
@d2 2
a3 2
"$Id: catfile.st,v 1.11 2012-03-02 15:10:13-08 - - $"
execname := '$RCSfile: catfile.st,v $' =~ '.*: (.*),v.*' at: 1.
d12 1
a12 1
   |bitNumber currentByte|
d15 1
a15 1
      currentByte := 0.
d18 4
a21 2
      self << currentByte asCharacter.
      self clearByte.
d24 1
a24 1
      currentByte isNil ifTrue: [self clearByte].
d26 2
a27 1
      currentByte at: bitNumber put: bit.
d50 7
a56 1
Smalltalk arguments size = 1
a57 5
      stderr << 'Usage: ' << execname << ' filename' << nl.
      stderr flush.
      ObjectMemory quit: 1.
   ]
   ifTrue: [
d62 1
a62 2
         bitArray do: [:bit| outfile writeBit: bit].
         outfile flushByte.
d74 6
@
